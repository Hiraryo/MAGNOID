@startuml
namespace Common{
    enum GameScene{
        Tutorial
        Forest
        City
        AirBattle
        FinalBoss
    }
    class SceneLoader
}
Common.SceneLoader -- Common.GameScene
namespace Damages{
    interface IDamageApplicable{
        - ApplyDamage(Damage damage): void
    }
    class Damage <<struct>>
}

namespace Effects{
    class Shake <<MonoBehaviour>>
}
namespace Enemies{
    class BaseEnemy <<MonoBehaviour>>
    class Spider
    namespace Gimmick{
        class OperationReversal
        class MinusMagnet
    }
}

namespace Installers{
    class StageInstaller
}
namespace Managers{
    enum GameState{
        Ready
        Battle
        Finished
    }
    class BGMFadeOut <<MonoBehaviour>>
    class GameInitializer <<MonoBehaviour>>
    class GameStartOption
    class GameStateManager <<MonoBehaviour>>
    class PlayerManager <<MonoBehaviour>>
    class ResultManager <<MonoBehaviour>>
    class ScoreManager <<MonoBehaviour>>
    class SoundManager <<MonoBehaviour>>
    class StageAudioManager <<MonoBehaviour>>
    class StageManager <<MonoBehaviour>>
    namespace Calculator{
        class SkillCalculator
        class MovementPatternCalculator
        class EnemyDifficultyCalculator
        class GameOverCalculator
    }
}

namespace Players{
    enum PlayerId
    interface IInputEventProvider
    class PlayerAnimator <<MonoBehaviour>>
    class PlayerCore <<MonoBehaviour>>
    class PlayerEffectEmitter <<MonoBehaviour>>
    class PlayerMover <<MonoBehaviour>>
    class PlayerAttacker <<MonoBehaviour>>
    class PlayerAvoider <<MonoBehaviour>>
    class PlayerJumper <<MonoBehaviour>>
    class PlayerRecover <<MonoBehaviour>>
    namespace Gimmick{
        class ElectromagneticBarrier
        class AI
        class MindReading
        class TimeManipulation
    }
}

namespace Stages{
    enum Weather{
        Sunny
        Rainy
        Cloudy
        Windy
        Humid
        Dry
        Stormy
        Snowy
        Foggy
        Dark
        Frosty
    }
    enum Timezone{
        Morning
        Noon
        Night
    }
    class StageState <<struct>>
    namespace Gimmick{
        class WeatherGimmick
        class ElectricBomb
        class ToolSwitching
        class SpecialTool1
        class SpecialTool2
        class SpecialTool3
        class SpecialTool4
    }
}

namespace Title{
    namespace Manager{
        class TitleManager <<MonoBehaviour>>
    }
    namespace Controller{
        class UIController <<MonoBehaviour>>
    }
    namespace View{
        class ChooseButton <<MonoBehaviour>>
    }
}
namespace UIs{
    class ResultController <<MonoBehaviour>>
    class StageUIController <<MonoBehaviour>>
}
Damages.IDamageApplicable --> Damages.Damage
Enemies.Gimmick.MinusMagnet ..> Enemies.Spider
Enemies.Gimmick.OperationReversal ..> Enemies.Spider
Enemies.Spider --|> Enemies.BaseEnemy
Enemies.Spider --> Damages.IDamageApplicable : Attack
Managers.Calculator.SkillCalculator ..> Managers.PlayerManager
Managers.Calculator.MovementPatternCalculator ..> Managers.PlayerManager
Managers.Calculator.EnemyDifficultyCalculator ..> Managers.PlayerManager
Managers.Calculator.GameOverCalculator ..> Managers.PlayerManager
Managers.Calculator.EnemyDifficultyCalculator ..> Enemies.Spider
Managers.GameStateManager -- Managers.GameState
Managers.SoundManager -- Managers.GameState
Managers.StageAudioManager -- Managers.GameState
Managers.GameStateManager --> Managers.GameInitializer
Managers.GameStateManager --> Managers.ResultManager
Managers.SoundManager --> Managers.BGMFadeOut
Managers.ResultManager ..> UIs.ResultController
Managers.GameStateManager ..> UIs.StageUIController
Managers.ScoreManager ..> UIs.StageUIController
Managers.GameStartOption ..> Stages.StageState
Players.Gimmick.ElectromagneticBarrier ..> Players.IInputEventProvider
Players.Gimmick.AI ..> Players.IInputEventProvider
Players.Gimmick.AI ..> Players.PlayerAttacker
Players.Gimmick.MindReading ..> Players.IInputEventProvider
Players.Gimmick.TimeManipulation ..> Players.IInputEventProvider
Players.PlayerMover --> Players.IInputEventProvider
Players.PlayerAttacker --> Players.IInputEventProvider
Players.PlayerJumper --> Players.IInputEventProvider
Players.PlayerAvoider --> Players.IInputEventProvider
Players.PlayerAnimator --> Players.PlayerMover
Players.PlayerRecover --> Players.PlayerCore
Players.PlayerMover --> Players.PlayerCore
Players.PlayerAttacker --> Players.PlayerCore
Players.PlayerJumper --> Players.PlayerCore
Players.PlayerAvoider --> Players.PlayerCore
Players.PlayerEffectEmitter --> Players.PlayerCore
Players.PlayerCore ..|>Damages.IDamageApplicable
Players.PlayerCore --> Players.PlayerId
Stages.Gimmick.WeatherGimmick --> Stages.Weather
Stages.Gimmick.WeatherGimmick ..> Managers.StageManager
Stages.StageState -- Stages.Timezone
Stages.StageState -- Stages.Weather
Stages.Gimmick.ElectricBomb ..> Damages.IDamageApplicable : Attack
Stages.Gimmick.ToolSwitching ..> Players.Gimmick.AI
Stages.Gimmick.SpecialTool1 ..> Players.PlayerAttacker
Stages.Gimmick.SpecialTool2 ..> Players.PlayerAttacker
Stages.Gimmick.SpecialTool2 ..> Players.PlayerMover
Stages.Gimmick.SpecialTool3 ..> Players.PlayerRecover
Stages.Gimmick.SpecialTool4 ..> Players.Gimmick.AI
@enduml